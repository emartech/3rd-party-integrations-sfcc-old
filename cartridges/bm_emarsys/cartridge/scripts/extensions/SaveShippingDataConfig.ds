/**
* Demandware Script File
* To save shipping emails data config in CO
*
*   @input CurrentHttpParameterMap : Object
*   @output Success : Boolean
*   @output Errors : Object
*
*/
var customObjectMgr = require('dw/object/CustomObjectMgr'),
	logger = require("dw/system/Logger"),
	web = require("dw/web");

function execute( args : PipelineDictionary ) : Number
{
	try {
		var formMap = args.CurrentHttpParameterMap;
		
		// get custom object instance, if doesn't exists the create it
	    var co = customObjectMgr.getCustomObject('EmarsysTransactionalEmailsConfig', 'shipping');
	    if (!co) {
	    	var co = customObjectMgr.createCustomObject('EmarsysTransactionalEmailsConfig', 'shipping');
	    }
	    
	    var events : Array = new Array(),			// list of selected external event, the event is always 1, but with list we will take 1st element
	    	fields : Array = new Array(),			// list of selected mapped fields
	    	placeholders : Array = new Array(),		// list of placeholders
	    	removedFields;	// list of fields to remove
	    
	    // read event value from collection and put it in the list	
	    for each (var event in formMap.dwfrm_emails__shippingconfirmation_externalEvent.values) {
	    	events.push(event);
	    }
	    
	    // read mapped fields values from collection and put it in the list
	    for each (var field in formMap.dwfrm_emails__shippingconfirmation_mappedField.values) {
	    	fields.push(field);
	    }
	    
	    // read placeholders fields values from collection and put it in the list
	    for each (var placeholder in formMap.dwfrm_emails__shippingconfirmation_placeholder.values) {
	    	placeholders.push(placeholder);
	    }
	    
	    // if there are any fields to remove, put the in the list
	    if (formMap.dwfrm_emails__shippingconfirmation_removeField !==  null) {
	    	removedFields = formMap.dwfrm_emails__shippingconfirmation_removeField.values;
	    }
	    
	    var event = events[0];
	    
	    var mappedFields : Array = new Array(),		// array of objects, each object has this structure {field: ..., placeholder: ...}
	    	existingFields : Array = new Array(),	// list of existing fields to check for doubles
	    	existingplaceholders : Array = new Array();	// list of existing fields to check for doubles
	    
	    var emptyFieldValue = web.Resource.msg('form.available.elements.option', 'emails_configuration', null);	
	    for (var i = 0; i < fields.length; i++) {
	    	var mappedField = null;		// object that will be added to the mappedFields list
	    	var field = fields[i],
	    		placeholder = placeholders[i];
	    		
	    	// if mapped field is not empty and wasn't added yet and if placeholder is not empty, add pairs to mappedField object
	    	var removed = false;
	    	if (removedFields) {
		    	for each (var removedField in removedFields) {
		    		if (removedField == i) {
				    	removed = true;
				    	break;
		    		}
		    	}
	    	}
	    	
	    	if (!removed) {
	    		if (field.length > 0 && field !== emptyFieldValue && existingFields.indexOf(field) == -1
		    		&& placeholder.length > 0 && existingplaceholders.indexOf(placeholder) == -1) {
		    		
		    		mappedField = {};
		    		
		    		mappedField.field = field;
		    		mappedField.placeholder = placeholder;
		    		
		    		existingFields.push(field);
		    		existingplaceholders.push(placeholder);
		    	}
	    	}
	    	
	    	// if object was filled add it to the list
	    	if (mappedField) {
	    		mappedFields.push(mappedField);
	    	}
	    }
	    
	    co.custom.externalEvent = event;
	    
	    co.custom.mappedFields = JSON.stringify(mappedFields);
	    
	    args.Success = true;
	    
	} catch(err) {
		// log error message in case something goes wrong
		logger.error("[SaveShippingDataConfig.ds #" + err.lineNumber + "] - ***Emarsys save shipping config data error message: " + err);
    	args.Success = false;
    	args.Errors = {"name": web.Resource.msg("save.data.error", "emails_configuration", null), "body": web.Resource.msg("contact.administrator", "emails_configuration", null)};
	}

    return PIPELET_NEXT;
}
