/**
*   Script for retrieving, exporting and remote uploading the Catalog data
*
*   @output ErrorMsg : String
*/
var system  = require('dw/system'),
    util    = require('dw/util'),
    obj     = require('dw/object'),
    net     = require('dw/net'),
    io      = require('dw/io'),
    catalog = require('dw/catalog');

function execute( args : PipelineDictionary ) : Number {

    var currentSite      = system.Site.getCurrent(),
        emarsysHelper    = new (require("./../util/EmarsysHelper"))(),
        exportFolderName = currentSite.getCustomPreferenceValue("emarsysPredictIMPEXFolder"),
        //FTP configuration
        sftpUsername     = currentSite.getCustomPreferenceValue("emarsysPredictSFTPUsername"),
        sftpPassword     = currentSite.getCustomPreferenceValue("emarsysPredictSFTPPassword"),
        sftpHost         = currentSite.getCustomPreferenceValue("emarsysPredictSFTPHost"),
        sftpPath         = currentSite.getCustomPreferenceValue("emarsysPredictSFTPPath"),
        //Retrieve site catalog
        siteCatalog      = catalog.CatalogMgr.getSiteCatalog(),
        //Retrieve Predict configuration
        predictConfig    = obj.CustomObjectMgr.getCustomObject("EmarsysPredictConfig", "predictConfig"),
        siteLocales      = currentSite.getAllowedLocales(),
        defaultLocale    = currentSite.getDefaultLocale(),
        currenciesMap    = JSON.parse(currentSite.getCustomPreferenceValue("emarsysPredictLocCurMap")); 

    try {
        if (!empty(sftpUsername) && !empty(sftpPassword) && !empty(sftpHost) && !empty(siteCatalog) && !empty(predictConfig)) {

            //Create CSV
            var calendar : Calendar = new util.Calendar(),
                currentDate : String = util.StringUtils.formatCalendar(calendar, "YYYYMMDDHHss"),
                siteID = system.Site.current.getID(),
                exportFolderPath = io.File.IMPEX + "/src/" + exportFolderName,
                exportFolder = new io.File(exportFolderPath);

            if (!exportFolder.exists()) {
                exportFolder.mkdirs();
            }

            var exportFile = new io.File(exportFolder.fullPath + io.File.SEPARATOR + "products_" + siteID + ".csv"),
                fileWriter = new io.FileWriter(exportFile, "utf-8"),
                writer     = new io.CSVStreamWriter(fileWriter, ',', '"');

            //Write CSV header
            var mappedFields = JSON.parse(predictConfig.custom.mappedFields),
                columnNames  = [];
            mappedFields.forEach(function(key, val) {
                if (key.placeholder.indexOf('_multilang') > 0) {
                    for (var i = 0; i < siteLocales.length; i++) {
                        if (currenciesMap[siteLocales[i]]) {
                            if (siteLocales[i] != 'default') {
                                if (siteLocales[i] === defaultLocale) {
                                    columnNames.push(key.placeholder.replace('_multilang', ''));
                                } else {
                                    columnNames.push(key.placeholder.replace('multilang', siteLocales[i]));
                                }
                            } else {
                                columnNames.push(key.placeholder.replace('_multilang', ''));
                            }
                    	}
                    }
                } else {
                    columnNames.push(key.placeholder);
                }
            });

            writer.writeNext(columnNames);

            //Query the catalog
            var products =  catalog.ProductMgr.queryProductsInCatalog(siteCatalog);

            while (products.hasNext()) {
                var product = products.next(),
                    exportType = predictConfig.custom.exportType;

                //Are we exporting all products or master products only?
                if( (exportType == "master" && product.isMaster()) || (exportType == "variations") ) {
                    var productInfo = [];
                    emarsysHelper.getProductInfo(mappedFields, product, productInfo, siteLocales, defaultLocale, currenciesMap);

                    //Write product info
                    productInfo.forEach(function(key, val) {
                        writer.writeNext(productInfo[val]);
                    });
                }
            }

            //Upload to SFTP
            var sftp = new net.SFTPClient(),
                connectionStatus = sftp.connect(sftpHost, sftpUsername, sftpPassword);
            if (connectionStatus) {
                if (sftpPath) {
                    var fileInfo = sftp.getFileInfo(sftpPath);
                    if (empty(fileInfo) || !fileInfo.directory) {
                        sftp.mkdir(sftpPath);
                    }
                    sftp.putBinary(sftpPath + "/" + exportFile.name, exportFile);
                } else {
                    sftp.putBinary("/" + exportFile.name, exportFile);
                }
                exportFile.remove();
            } else {
                //We couldn't connect to the FTP server
                system.Logger.error("[predict/ExportCatalogJob.ds] - ***Emarsys Predict catalog feed error: FTP connection could not be established (host: " + sftpHost + ", username: " + sftpUsername + ")");
                args.ErrorMsg = "FTP connection could not be established (host: " + sftpHost + ", username: " + sftpUsername + ")";
                return PIPELET_ERROR;
            }

            //Clear resources
            products.close();
            writer.close();
            fileWriter.close();
            sftp.disconnect();

        } else {
            system.Logger.error("[predict/ExportCatalogJob.ds] - ***Emarsys Predict catalog feed error: Please fill in your FTP credentials / assign a catalog / setup Predict");
            args.ErrorMsg = "Please fill in your FTP credentials / assign a catalog / setup Predict";
            return PIPELET_ERROR;
        }

    } catch (err) {
        system.Logger.error("[predict/ExportCatalogJob.ds #" + err.lineNumber + "] - ***Emarsys Predict catalog job export error: " + err);
        args.ErrorMsg = err.toString();
        return PIPELET_ERROR;
    }

    return PIPELET_NEXT;
}
