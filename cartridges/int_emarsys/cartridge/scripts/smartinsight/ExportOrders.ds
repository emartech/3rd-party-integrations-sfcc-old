/**
 * Demandware Script File
 * To define input and output parameters, create entries of the form:
 *
 *-   @input ExampleIn : String This is a sample comment.
 *-   @output ExampleOut : Number
 *
 */

var calendar = require('dw/util/Calendar'),
    systemObjectMgr = require('dw/object/SystemObjectMgr'),
    customObjectMgr = require("dw/object/CustomObjectMgr"),
    orderMgr = require('dw/order/OrderMgr'),
    logger = require("dw/system/Logger"),
    io = require("dw/io"),
    transaction = require("dw/system/Transaction"),
    util   = require('dw/util'),
    system = require('dw/system');

function execute(args) {
    var emarsysHelper = new (require("./../util/EmarsysHelper"))(),
        exportOrders = system.Site.current.preferences.custom.emarsysSmartInsightOptIn,
        enableCustomTimeFrame = system.Site.current.preferences.custom.emarsysEnableSmartInsightTimeframe,
        startDate = null,    // start date for export timeframe
        endDate = null,        // end date for export timeframe
        destinationFolder = system.Site.current.preferences.custom.emarsysSmartInsightDestinationFolder,
        fileName = emarsysHelper.createSmartInsightFeedName(),
        exportFile = emarsysHelper.createSmartInsightExportFile(),
        feedContent = '',
        feedLines = [],
        separator = ',',
        day = 24 * 60 * 60 * 1000,    // 24hrs in millis
        today = new Date(),
        yesterday = new Date(today);

    // subtract number of milliseconds in 24h from today presentation im millis as well and create a new date with it
    yesterday = new Date(yesterday.setTime(yesterday.getTime() - day));

    // if export is disabled then do nothing
    if (!exportOrders) {
        return PIPELET_NEXT;
    }

    var co = customObjectMgr.getCustomObject('EmarsysSmartInsightConfiguration', 'emarsysSmartInsight'),
        columnNames = [],    // names of columns in created feed
        attributes = [];    // attributes to read values from

    // throw error when can't load config
    if (!co) {
        logger.error('[ExportOrders.ds] - *** Error occurred during reading SmartInsight stored fields mapping.');
        return PIPELET_ERROR;
    }

    // parse mapped fields
    var mappedFields = JSON.parse(co.custom.mappedFields);

    if (mappedFields.length > 0) {
        for (var i = 0; i < mappedFields.length; i++) {
            var placeholder = mappedFields[i].placeholder;
            var columnName = emarsysHelper.escapeCSVField(placeholder);
            columnNames.push(columnName);
            attributes.push(mappedFields[i].field);
        }
    }

    if (columnNames.length > 0) {
        var titleLine = columnNames.join(separator);
        feedLines.push(titleLine);
    }

    startDate = enableCustomTimeFrame ? system.Site.current.preferences.custom.emarsysSmartInsightTimeframeStart : yesterday;
    endDate = enableCustomTimeFrame ? system.Site.current.preferences.custom.emarsysSmartInsightTimeframeEnd : today;
    
    // create CSV
    var fileWriter = new io.FileWriter(exportFile, "utf-8"),
    writer = new io.CSVStreamWriter(fileWriter, ',', '"');
    
    // write CSV header
    writer.writeNext(columnNames);
    
    var ORDER_BY = "creationDate desc";
    var query = "creationDate >= {0} AND creationDate <= {1}";
    if (!enableCustomTimeFrame) {
        query += " AND (custom.exported = NULL OR custom.exported = false)";
    }
    
    var allOrders = orderMgr.searchOrders(query, ORDER_BY, startDate, endDate);

    // start writing csv
    while (allOrders.hasNext()) {
        var order = allOrders.next();

        transaction.begin();
        try {
            var value = null, // escaped value
                origValue = ''; // non escaped value
            var lineItems = [];

            // if list of columns for feed is empty
            if (!columnNames.length) {
                continue;
            }
            lineItems = Array.prototype.concat(
                order.getAllProductLineItems().toArray(),
                order.getGiftCertificateLineItems().toArray()
            );
            lineItems.forEach(function (lineItem) {
                var feedLine = [];    // list of attr values in a feed line
                attributes.forEach(function (attribute) {
                    origValue = renderAttributeValue(attribute, order, lineItem);
                    value = emarsysHelper.escapeCSVField(origValue);
                    feedLine.push(value);
                });

                if (feedLine.length > 0) {
                    writer.writeNext(feedLine);
                }
            });

            // set order as exported
            order.custom.exported = true;
            transaction.commit();
        } catch (err) {
            transaction.rollback();
            logger.error("[ExportOrders.ds #" + err.lineNumber + "] - *** Export data error: " + err);
            return PIPELET_ERROR;
        }
    }

    allOrders.close();
    writer.close();
    fileWriter.close();

    try {
        emarsysHelper.putDataToSFTP(exportFile, destinationFolder, fileName);
    } catch (err) {
        logger.error("[ExportOrders.ds #]" + err.lineNumber + "] - *** Send data error: " + err);
        return PIPELET_ERROR;
    }


    return PIPELET_NEXT;
}

/**
 * Renders attribute value
 * @param attributesChain - attributes chain (ex: attr1.attr2.attr3.attr4)
 * @param order
 * @param lineItem
 * @returns {*}
 */
function renderAttributeValue(attributesChain, order, lineItem) {
    var attributes = attributesChain.split('.');
    switch (attributes[0]) {
        /*
         Render order number
         */
        case 'order':
            return order.currentOrderNo;
            break;
        /*
         Render order creation date
         */
        case 'date':
            return dw.util.StringUtils.formatCalendar(new calendar(order.creationDate), "YYYY-MM-dd");
            break;
        /*
         Render customer email
         */
        case 'customer':
            return order.customerEmail;
            break;
        /*
         Render item ID
         */
        case 'item':
            return getItemId(lineItem);
            break;
        /*
        Render variant ID
        */
       case 'variantid':
           return getItemId(lineItem);
           break;
       /*
       Render master ID
       */
       case 'masterid':
          return getMasterId(lineItem);
          break;
        /*
         Render item quantity
        */
        case 'quantity':
           return getQuantity(lineItem);
           break;
        /*
         Render item price
         */
        case 'c_sales_amount':
            var price = getPrice(lineItem);
            if (order.status == order.ORDER_STATUS_CANCELLED) {
                price = -price;
            }
            return price || '0';
            break;
        /*
         Render other object attributes
         */
        case 'custom':
            attributes.shift();
            return getCustom(attributes, order, lineItem);
        default:
            return null;
    }
}


/**
 * Helper method to render master ID
 * @param lineItem object of type ProductLineItem or GiftCertificateLineItem
 * @returns {*}
 */
function getMasterId(lineItem) {
    switch (true) {
        case lineItem instanceof dw.order.ProductLineItem && !empty(lineItem.product) && lineItem.product instanceof dw.catalog.Variant:
            return lineItem.product.masterProduct.ID;
        /*
         Render product ID if lineItem is ProductLineItem
         */
        case lineItem instanceof dw.order.ProductLineItem:
            return lineItem.productID;
        /*
         Render gift certificate ID if lineItem is GiftCertificateLineItem
         */
        case lineItem instanceof dw.order.GiftCertificateLineItem:
            return lineItem.getUUID();
        default:
            return null;
    }
}

/**
 * Helper method to render item ID
 * @param lineItem object of type ProductLineItem or GiftCertificateLineItem
 * @returns {*}
 */
function getItemId(lineItem) {
    switch (true) {
        /*
         Render product ID if lineItem is ProductLineItem
         */
        case lineItem instanceof dw.order.ProductLineItem:
            return lineItem.productID;
        /*
         Render gift certificate ID if lineItem is GiftCertificateLineItem
         */
        case lineItem instanceof dw.order.GiftCertificateLineItem:
            return lineItem.getUUID();
        default:
            return null;
    }
}

/**
 * Helper method to render item quantity
 * @param lineItem
 * @returns {*}
 */
function getQuantity(lineItem) {
    if (lineItem instanceof dw.order.GiftCertificateLineItem) {
        return 1;
    }
    return lineItem.getQuantity().getValue();
}

/**
 * Helper method to render item price
 * @param lineItem
 * @returns {*}
 */
function getPrice(lineItem) {
    switch (true) {
        case lineItem instanceof dw.order.ProductLineItem:
            var priceValue = lineItem.getProratedPrice().getValueOrNull();
            if (!empty(priceValue)) {
                return priceValue.toFixed(2);
            } else {
                return null;
            }
        case lineItem instanceof dw.order.GiftCertificateLineItem:
            var priceValue = lineItem.getPrice().getValueOrNull();
            if (!empty(priceValue)) {
                return priceValue.toFixed(2);
            } else {
                return null;
            }
        default:
            return null;
    }
}

/**
 * Helper method to render custom fields
 * @param attributes
 * @param order
 * @param lineItem
 * @returns {*}
 */
function getCustom(attributes, order, lineItem) {
    var emarsysHelper = new (require("./../util/EmarsysHelper"))();
    var firstAttr = attributes[0];
    attributes.shift();
    switch (firstAttr) {
        case 'order':
            return emarsysHelper.getOrderValues(order, attributes);
            break;
        case 'lineItem':
            return emarsysHelper.getLineItemValues(lineItem, attributes);
            break;
        case 'product':
            try {
                return emarsysHelper.getProductValues(lineItem, attributes);
            } catch (e) {
                return null;
            }
            break;
        default:
            return null;
    }
}