/**
 * Demandware Script File
 * To define input and output parameters, create entries of the form:
 *
 *-   @input ExampleIn : String This is a sample comment.
 *-   @output ExampleOut : Number
 *
 */

var Site            = require('dw/system/Site'),
    currentSite     = Site.getCurrent(),
    Calendar        = require('dw/util/Calendar'),
    CustomObjectMgr = require('dw/object/CustomObjectMgr'),
    OrderMgr        = require('dw/order/OrderMgr'),
    Logger          = require('dw/system/Logger'),
    FileWriter      = require('dw/io/FileWriter'),
    CSVStreamWriter = require('dw/io/CSVStreamWriter'),
    Transaction     = require('dw/system/Transaction'),
    StringUtils     = require('dw/util/StringUtils'),
    Currency        = require('dw/util/Currency');

function execute(args) {
    var emarsysHelper          = new (require("./../util/EmarsysHelper"))(),
        sitePreferences        = currentSite.getPreferences(),
        defaultRequestCurrency = session.currency.currencyCode,
        exportOrders           = sitePreferences.custom['emarsysSmartInsightOptIn'],
        enableCustomTimeFrame  = sitePreferences.custom['emarsysEnableSmartInsightTimeframe'],
        timeframeStart         = sitePreferences.custom['emarsysSmartInsightTimeframeStart'],
        timeframeEnd           = sitePreferences.custom['emarsysSmartInsightTimeframeEnd'],
        destinationFolder      = sitePreferences.custom['emarsysSmartInsightDestinationFolder'],
        currencyToConvert      = sitePreferences.custom['emarsysSmartInsightCurrency'],
        fileName               = emarsysHelper.createSmartInsightFeedName(),
        exportFile             = emarsysHelper.createSmartInsightExportFile(),
        feedContent            = '',
        feedLines              = [],
        separator              = ',',
        day                    = 24 * 60 * 60 * 1000,    // 24hrs in millis
        today                  = new Date(),
        yesterday              = new Date(today);

    // subtract number of milliseconds in 24h from today presentation im millis as well and create a new date with it
    yesterday = new Date(yesterday.setTime(yesterday.getTime() - day));

    // if export is disabled then do nothing
    if (!exportOrders) {
        return PIPELET_NEXT;
    }

    var co          = CustomObjectMgr.getCustomObject('EmarsysSmartInsightConfiguration', 'emarsysSmartInsight'),
        columnNames = [],    // names of columns in created feed
        attributes  = [];    // attributes to read values from

    // throw error when can't load config
    if (!co) {
        Logger.error('[ExportOrders.ds] - *** Error occurred during reading SmartInsight stored fields mapping.');
        return PIPELET_ERROR;
    }

    // parse mapped fields
    var mappedFields = JSON.parse(co.custom.mappedFields);

    if (mappedFields.length > 0) {
        for (var i = 0; i < mappedFields.length; i++) {
            var placeholder = mappedFields[i].placeholder,
                columnName  = emarsysHelper.escapeCSVField(placeholder);

            columnNames.push(columnName);
            attributes.push(mappedFields[i].field);
        }
    }

    if (columnNames.length > 0) {
        var titleLine = columnNames.join(separator);

        feedLines.push(titleLine);
    }

    // start date for export timeframe
    var startDate = enableCustomTimeFrame ? timeframeStart : yesterday;
    // end date for export timeframe
    var endDate = enableCustomTimeFrame ? timeframeEnd : today;

    // create CSV
    var fileWriter = new FileWriter(exportFile, "utf-8"),
        writer     = new CSVStreamWriter(fileWriter, ',', '"');

    // write CSV header
    writer.writeNext(columnNames);

    var ORDER_BY = "creationDate desc",
        query    = "creationDate >= {0} AND creationDate <= {1}";
    if (!enableCustomTimeFrame) {
        query += " AND (custom.exported = NULL OR custom.exported = false)";
    }

    var allOrders = OrderMgr.searchOrders(query, ORDER_BY, startDate, endDate);

    // start writing csv
    while (allOrders.hasNext()) {
        var order = allOrders.next();

        Transaction.begin();
        try {
            var value     = null, // escaped value
                origValue = '',   // non escaped value
                lineItems = [];

            // if list of columns for feed is empty
            if (!columnNames.length) {
                continue;
            }

            lineItems = Array.prototype.concat(
                order.getAllProductLineItems().toArray(),
                order.getGiftCertificateLineItems().toArray()
            );
            
            lineItems.forEach(function (lineItem) {
                var feedLine = [];    // list of attr values in a feed line

                attributes.forEach(function (attribute) {
                    origValue = renderAttributeValue(attribute, order, lineItem, currencyToConvert, defaultRequestCurrency);
                    value     = emarsysHelper.escapeCSVField(origValue);

                    feedLine.push(value);
                });

                if (feedLine.length > 0) {
                    writer.writeNext(feedLine);
                }
            });

            // set order as exported
            order.custom.exported = true;
            Transaction.commit();

        } catch (err) {
            Transaction.rollback();
            Logger.error("[ExportOrders.ds #" + err.lineNumber + "] - *** Export data error: " + err);

            return PIPELET_ERROR;
        }
    }

    allOrders.close();
    writer.close();
    fileWriter.close();

    try {
        emarsysHelper.putDataToSFTP(exportFile, destinationFolder, fileName);
    } catch (err) {
        Logger.error("[ExportOrders.ds #]" + err.lineNumber + "] - *** Send data error: " + err);

        return PIPELET_ERROR;
    }

    return PIPELET_NEXT;
}

/**
 * Renders attribute value
 * @param attributesChain - attributes chain (ex: attr1.attr2.attr3.attr4)
 * @param order
 * @param lineItem
 * @returns {*}
 */
function renderAttributeValue(attributesChain, order, lineItem, currencyToConvert, defaultRequestCurrency) {
    var attributes = attributesChain.split('.');
    switch (attributes[0]) {
        /*
         Render order number
         */
        case 'order':
            return order.currentOrderNo;
            break;
        /*
         Render order creation date
         */
        case 'date':
            return StringUtils.formatCalendar(new Calendar(order.creationDate), "YYYY-MM-dd");
            break;
        /*
         Render customer email
         */
        case 'customer':
            return order.customerEmail;
            break;
        /*
         Render item ID
         */
        case 'item':
            return getItemId(lineItem);
            break;
        /*
        Render variant ID
        */
       case 'variantid':
           return getItemId(lineItem);
           break;
       /*
       Render master ID
       */
       case 'masterid':
          return getMasterId(lineItem);
          break;
        /*
         Render item quantity
        */
        case 'quantity':
           return getQuantity(lineItem);
           break;
        /*
         Render item price
         */
        case 'price':
            var price = getPrice(lineItem, order, currencyToConvert, defaultRequestCurrency);
            if (order.status.value == order.ORDER_STATUS_CANCELLED) {
                price = -price;
            }
            return price || '0';
            break;
        /*
         Render other object attributes
         */
        case 'custom':
            attributes.shift();
            return getCustom(attributes, order, lineItem);
        default:
            return null;
    }
}


/**
 * Helper method to render master ID
 * @param lineItem object of type ProductLineItem or GiftCertificateLineItem
 * @returns {*}
 */
function getMasterId(lineItem) {
    switch (true) {
        case lineItem instanceof dw.order.ProductLineItem && !empty(lineItem.product) && lineItem.product instanceof dw.catalog.Variant:
            return lineItem.product.masterProduct.ID;
        /*
         Render product ID if lineItem is ProductLineItem
         */
        case lineItem instanceof dw.order.ProductLineItem:
            return lineItem.productID;
        /*
         Render gift certificate ID if lineItem is GiftCertificateLineItem
         */
        case lineItem instanceof dw.order.GiftCertificateLineItem:
            return lineItem.getUUID();
        default:
            return null;
    }
}

/**
 * Helper method to render item ID
 * @param lineItem object of type ProductLineItem or GiftCertificateLineItem
 * @returns {*}
 */
function getItemId(lineItem) {
    switch (true) {
        /*
         Render product ID if lineItem is ProductLineItem
         */
        case lineItem instanceof dw.order.ProductLineItem:
            return lineItem.productID;
        /*
         Render gift certificate ID if lineItem is GiftCertificateLineItem
         */
        case lineItem instanceof dw.order.GiftCertificateLineItem:
            return lineItem.getUUID();
        default:
            return null;
    }
}

/**
 * Helper method to render item quantity
 * @param lineItem
 * @returns {*}
 */
function getQuantity(lineItem) {
    if (lineItem instanceof dw.order.GiftCertificateLineItem) {
        return 1;
    }
    return lineItem.getQuantity().getValue();
}

/**
 * Helper method to render item price
 * @param lineItem
 * @returns {*}
 */
function getPrice(lineItem, order, currencyToConvert, defaultRequestCurrency) { 
    switch (true) {
        case lineItem instanceof dw.order.ProductLineItem:

            var defaultSiteCurrency = session.currency.currencyCode,
                orderCurrencyCode   = order.getCurrencyCode(),
                currency;

            if (currencyToConvert === orderCurrencyCode) {
                var priceValue = lineItem.getProratedPrice().getValueOrNull();
                
                if (!empty(priceValue)) {
                    return priceValue.toFixed(2);
                } else {
                    return null;
                }
            } else {
                var priceValue = lineItem.getProratedPrice().getValueOrNull();

                currency = Currency.getCurrency(orderCurrencyCode);
                session.setCurrency(currency);
                var priceInOrderCurrency = lineItem.getProduct().getPriceModel().getPrice();

                currency = Currency.getCurrency(currencyToConvert);
                session.setCurrency(currency);
                var priceInCurrencyToConvert = lineItem.getProduct().getPriceModel().getPrice();

                var ratio = priceInCurrencyToConvert.getValue() / priceInOrderCurrency.getValue();

                var convertedPrice = new Number(priceValue * ratio).toFixed(2); 

                if (!empty(priceValue)) {
                    currency = Currency.getCurrency(defaultRequestCurrency);
                    session.setCurrency(currency);
                    return convertedPrice;
                } else {
                    currency = Currency.getCurrency(defaultRequestCurrency);
                    session.setCurrency(currency);
                    return null;
                }
            }
        
        case lineItem instanceof dw.order.GiftCertificateLineItem:
            var priceValue = lineItem.getPrice().getValueOrNull();

            if (!empty(priceValue)) {
                return priceValue.toFixed(2);
            } else {
                return null;
            }

        default:
            return null;
    }
}

/**
 * Helper method to render custom fields
 * @param attributes
 * @param order
 * @param lineItem
 * @returns {*}
 */
function getCustom(attributes, order, lineItem) {
    var emarsysHelper = new (require("./../util/EmarsysHelper"))();
    var firstAttr = attributes[0];
    attributes.shift();
    switch (firstAttr) {
        case 'order':
            return emarsysHelper.getOrderValues(order, attributes);
            break;
        case 'lineItem':
            return emarsysHelper.getLineItemValues(lineItem, attributes);
            break;
        case 'product':
            try {
                return emarsysHelper.getProductValues(lineItem, attributes);
            } catch (e) {
                return null;
            }
            break;
        default:
            return null;
    }
}